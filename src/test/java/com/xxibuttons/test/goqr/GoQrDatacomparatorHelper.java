package com.xxibuttons.test.goqr;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;

/**
 * Helps comparing data contained in QR.
 *
 * If a QR is generated and it contains information (a string, a URL,...), we can send again this url to read-qr-code
 * API command and check if generated image contains this information
 */
public class GoQrDatacomparatorHelper {

    /**
     * Call QR Read and compares the information returned with the information sent as data in QR Create url
     *
     * @param url  The QR URL that contains data
     * @param data The data to be compared with
     * @return True is data is the same
     * @throws IOException if occurs communication problems.
     */
    boolean compareDataContained(final String url, final String data) throws IOException {
        GoQRRESTRequestHelper helper = new GoQRRESTRequestHelper(
                GoQRRESTRequestHelper.METHOD.GET,
                GoQRRESTRequestHelper.API_COMMAND.READ_QR,
                url
        );
        String response = helper.readQRCode();
        JSONObject jsonObject = new JSONArray(response).getJSONObject(0);
        JSONArray a = jsonObject.getJSONArray("symbol");
        try {
            String dataReturned = a.getJSONObject(0).getString("data");
            return dataReturned.compareTo(data) == 0;
        } catch (JSONException js) {
            js.printStackTrace();
            return false;
        }

    }

    /**
     * Pixel to pixel comparison
     *
     * @param generated Buffered image generated by API
     * @param filePath Path of the sample file to compare with
     * @return True if all images are the same pixel to pixel.
     */
    boolean bufferedImagesEqual(BufferedImage generated, String filePath) throws IOException {
        BufferedImage base = ImageIO.read(new File(filePath));
        if (generated.getWidth() == base.getWidth() && generated.getHeight() == base.getHeight()) {
            for (int x = 0; x < generated.getWidth(); x++) {
                for (int y = 0; y < generated.getHeight(); y++) {
                    if (generated.getRGB(x, y) != base.getRGB(x, y))
                        return false;
                }
            }
        } else {
            return false;
        }
        return true;

    }
}
